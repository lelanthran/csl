(bi_list "two three"
   (bi_list "next" 4 5.5)
   "more items"
   (bi_list 'another
      '(bi_list (("nested bi_list" with)))
   666))


   (+ (+ 5 4.3333333 3 2 1) 1.1 7 )
   (- 3.0 0.0009)
   (* 2 2 2)
   (/ 25 5.5)

   (bi_define 'var1 "fifty")

   (* var1 5)

   (bi_print "Hello World" (bi_list 1 2 3 4))

   (bi_define 'expr_results
         (bi_eval (+ 1 2)
               (- 5 2)
               (* 3 2)
               (/ 7 2)))

   (bi_define 'biglist
           (bi_concat '(1 2 3 4) '(a b c d) '(5 6 7 8) '(A B C D)))

   (bi_print "Printing Biglist" biglist)

; Test local scope bindings
(bi_let '((one 1) (two 2))
  '(bi_print ">>>>>>>>>>>>>>>> " one)
  '(bi_set 'one two)
  '(bi_print ">>>>>>>>>>>>>>>> " one))


(bi_let '((one 1) (two 2))
     '(bi_set 'one two)
     '(bi_print "!!!!!!!!! " one))

; Define a list and bind it to symbol myfunc
(bi_define 'myfunc
   '(bi_let '((a 11) (b 2))
     '(bi_eval (bi_print "Function")
         (* a b))))

; Eval myfunc
(bi_print "Eval result ............" (bi_eval myfunc))

; Define a list of two elements as (parameter body), with parameter being
; a list of symbols and body being the body of the function.
(bi_define 'realfunc '((a b) (+ a b)))

; Call the symbol as a function
(bi_funcall '(1 2) realfunc)

; Make it easier to call, simply define the funcall as the body of a new
; function
(bi_define 'fadd '(bi_funcall '(1 2) 'realfunc))

; Evaluating the second-level define gives us a proper function call
(fadd 1 2)


; Luckily we can use the builtin 'defun' to do all of the above.
(bi_defun 'realfunc '(a b)
   '(+ (* a a) (* b b)))

(realfunc 1 2)
(realfunc 3 4)
(realfunc 2 3)

; Test the boolean operators
(bi_print (<   5.5   5.4))
(bi_print (<=  5.5   5.4))
(bi_print (<=  5.5   5.5))
(bi_print (>   5.5   5.4))
(bi_print (>=  5.5   5.4))
(bi_print (>=  5.5   5.5))
(bi_print (=   5.5   5.4))
(bi_print (=   5.5   5.5))

(bi_print (<   7   6))
(bi_print (<=  7   6))
(bi_print (<=  7   7))
(bi_print (>   7   6))
(bi_print (>=  7   6))
(bi_print (>=  7   7))
(bi_print (=   7   6))
(bi_print (=   7   7))

(bi_print (<   7.2  6))
(bi_print (<=  7.2  6))
(bi_print (<=  7.2  7))
(bi_print (>   7.2  6))
(bi_print (>=  7.2  6))
(bi_print (>=  7.2  7))
(bi_print (=   7.2  6))
(bi_print (=   7.2  7))

(bi_define 'v1 5)
(bi_define 'v2 5.1)
(bi_define 'v2 5.4)
(bi_set 'v2 5.4)

; Test the conditional
(bi_if (>= v1 v2)
   '(bi_print "TRUE")
   '(bi_print "FALSE"))

(bi_if (<= v1 v2)
   '(bi_print "TRUE")
   '(bi_print "FALSE"))


; Test recursion
(bi_defun 'fact '(x)
   '(bi_if (= x 0)
      1
      '(* x (fact (- x 1)))))

(fact 5) ; Call the function

; Test the trap handler - this drops us into the debugger
(bi_trap_set 'TRAP_TEST '(fact 4))
(bi_trap_set 'TRAP_TEST '(bi_print "the replacement trap handler"))

(bi_trap 'TRAP_TEST)

(bi_undefine 'fact)

; Test the trap handler from within a function
(bi_defun 'fact '(x)
   '(bi_if (= x 0)
      '(bi_trap 'TRAP_NOPARAM)
      '(* x (fact (- x 1)))))

(fact 4) ; Call the function

; (bi_trap_clear 'TRAP_TEST)

; (fact 3) ; Call the function

; Test the bitwise operators
(bi_bit_and 1 3 7 0 5 6)
(bi_bit_and 1 2 3 4 5 6)
(bi_bit_or 0 0 0 4 0 0)
(bi_bit_or 0 0 0 0 0 0)
(bi_bit_xor 0 0 0 4 0 0)
(bi_bit_xor 0 0 0 0 0 0)

(bi_bit_not 1)
(bi_bit_not 0)

(bi_bit_nand 1 2 3 0 5 6)
(bi_bit_nand 1 2 3 4 5 6)
(bi_bit_nor 0 0 0 4 0 0)
(bi_bit_nor 0 0 0 0 0 0)
(bi_bit_nxor 0 0 0 4 0 0)
(bi_bit_nxor 0 0 0 0 0 0)


(bi_log_and 1 3 7 0 5 6)
(bi_log_and 1 2 3 4 5 6)
(bi_log_or 0 0 0 4 0 0)
(bi_log_or 0 0 0 0 0 0)

(bi_log_not 1)
(bi_log_not 0)

(bi_log_nand 1 2 3 0 5 6)
(bi_log_nand 1 2 3 4 5 6)
(bi_log_nor 0 0 0 4 0 0)
(bi_log_nor 0 0 0 0 0 0)

; Test the error-checking for define
(bi_define 'myerrorval 5 4)


; declare an external function that we want to call. The function is
; testlib_add, testlib_sub, and it is in the dll/so called libcsl.
(bi_defext 'tlib_add '("libcsl" "testlib_add" INT (INT INT)))
(bi_defext 'tlib_sub '("libcsl" "testlib_sub" INT (INT INT)))

; This is a more detailed test of passing arguments to external functions;
; we pass integers, pointers, a double and a float.
(bi_defext 'tlib_big
   '("libcsl" "testlib_big" UINT64_T (POINTER UINT8_T UINT64_T DOUBLE FLOAT)))

; Call the external functions
(tlib_add 4 5)
(tlib_sub 5 4)
(tlib_big "Hello World - Large String To Function"
          254
          (* 1024 1024)
          (/ 10.0 3.0)
          (/ 25.0 2.0))

; Iterate across a list
(bi_defun 'print_list '(mylist)
   '(bi_print "Start of PRINT\\n" (bi_first mylist)
      (bi_if (> (bi_length mylist) 0)
         '(print_list (bi_rest mylist))
         '(bi_print "End of PRINT\\n"))))

; (bi_first (bi_rest (bi_list "one" "two" "three")))
; (bi_print "one" "two" "three")


(print_list (bi_list "one" "two" "three"))

nil
nil


; Test the while construct
(bi_let '((i 0))
   '(bi_while '(< i 10)
              '(bi_print "Printing ..." (+ i 5))
              '(bi_set 'i (+ i 1))))

; Test the creation of byte-buffers
(bi_define 'mybuffer (bi_nalloc 42))

(bi_let '((buf (bi_nalloc 12)))
   '(bi_print "=======================" buf)
    '(bi_let '((two buf))
       '(bi_print "-------------------------------" two)))

(bi_undefine 'mybuffer)

; Declare new types - the typename, the length and the alignment.
(bi_deftype 'NEWTYPE1 '(9 16))
(bi_deftype 'NEWTYPE2 '(8 8))
(bi_deftype 'NEWTYPE3 '(7 8))
(bi_deftype 'NEWTYPE4 '(6 8))
(bi_deftype 'NEWTYPE5 '(5 4))


(bi_deftype 'NEWTYPE3 '(7 8))

; Declare a struct that the external function needs
(bi_defstruct 'SHLIB_TEST_T
   '((INT8_T    'i8_1)
     (INT16_T   'i16)
     (INT8_T    'i8_2)
     (INT32_T   'i32)
     (INT8_T    'i8_3)
     (INT64_T   'i64)
     (NEWTYPE3  'buf)
     (INT32_T   'final)))

; Declare the external function we are going to call
(bi_defext 'tlib_struct_func
   '("libcsl" "testlib_struct" INT (SHLIB_TEST_T)))

; Call the external function with an instance of struct 'SHLIB_TEST_T as
; declared above. The function (newstruct ...) creates any struct that was
; declared with defstruct.
(bi_print "funcall result: "
   (tlib_struct_func
   (bi_newstruct 'SHLIB_TEST_T
                  '(3
                    257
                    254
                    65537
                    253
                    99999999999
                    (bi_nalloc 7)
                    65539))))


