
-- 1. Parser is ignoring the final token in a file. This is an error in the
--   reader.
--   UPDATE: Rewrite parser to only present the next atom in the input (we
--   must read only a single atom at a time). This lets us do a REPL and
--   avoids the current errors with using a toplevel list to hold all the
--   atoms we read.

-- 2. rt_new() currently loads each builtin individually. Must change to
-- load everything in a loop (store the string/function pairs in an
-- array).

-- 3. Must perform replacement in rt_add_symbol.

-- 4. (Linked to #3) provide an undefine that removes entries from the symbol
--    table.

-- 5. Add support for user-defined functions. This is harder than it looks;
--    will need to decide on scoping rules (prefer dynamic - it's easier to
--    implement) and ensure that every "list" node can also store a symbol
--    table. This means, of course, that the rt_symbol_* functions must
--    operate on a given symbol table, and not the global one.
--
--    (NOTE: Have to implement a stack, because adding symbol tables to
--    atom_LIST types result in each atom needing a pointer to its parent as
--    well. The stack can be almost fully implemented in rt_t data objects)

--  6. defun must not return anything, or if it does we must handle it
--  properly - this is because:
--  (defun 'test '(a b) '(+ a b)
--  => returns (symbol-table-entry) which gets stored in current list.
--
--  (test 3 4)
--  => returns 7, which gets stored in current list.
--
--  current list then consists of (test 7)

6. Add in some facility for error handling, possibly some variation on
   signals (signals emulated in program memory with setjmp/longjmp sounds
   like a good idea).

7. Tokeniser should be able to tokenise input in a buffer. Parser must
   signal errors if it runs out of tokens (unterminated list).

-- 8. Tokeniser needs to ignore comments.

9. Need to add type promotion/coercion rules when comparing and assign to
   atoms.

10. Must change all error display/handling in builtins.c to use the new
   trap mechanism.

11. Add in looping constructs (while, for, doloop, etc)

12. Need easy way to define structs/types for ffi.

13. Complete the byte-buffer implementation so that native C functions an
   use it.

14. Check that quotes themselves can be quoted (is this even necessary?)

15. Need to make a generic function to check the paramcount and param type
   (where possible).

-- 16. rt_trap must take the args[] array as well, so that the current
-- expression can be displayed to the user.
